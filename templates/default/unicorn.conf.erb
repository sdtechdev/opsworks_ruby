worker_processes <%= @out[:worker_processes] %>

user "<%= node['deployer']['user'] %>"

working_directory "<%= @deploy_dir %>/current"
<% if @out[:port] %>
listen "0.0.0.0:<%= @out[:port] %>",
<% elsif @webserver == 'apache2' %>
listen "127.0.0.1:3000",
<% else %>
listen "<%= @deploy_dir %>/shared/sockets/unicorn.sock",
<% end %>
       :backlog => <%= @out[:backlog] %>,
       :tcp_nodelay => <%= @out[:tcp_nodelay] %>,
       :tcp_nopush => <%= @out[:tcp_nopush] %>,
       :tries => <%= @out[:tries] %>,
       :delay => <%= @out[:delay] %>,
       :accept_filter => 'httpready'

timeout <%= @out[:timeout] %>

pid "/run/lock/<%= @app_shortname %>/unicorn.pid"

stderr_path "<%= @deploy_dir %>/shared/log/unicorn.stderr.log"
stdout_path "<%= @deploy_dir %>/shared/log/unicorn.stdout.log"

preload_app <%= @out[:preload_app] %>
<%- if @out[:preload_app] %>
  after_fork do |_server, _worker|
    if defined?(ActiveRecord::Base)
      ActiveRecord::Base.establish_connection
    end
  end
<%- end %>
GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)

# ensure Unicorn doesn't use a stale Gemfile when restarting
# more info: https://willj.net/2011/08/02/fixing-the-gemfile-not-found-bundlergemfilenotfound-error/
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= @deploy_dir %>/current/Gemfile"
end

initialized = false
before_fork do |server, worker|
  unless initialized
    initialized = true

    # Preload locales
    I18n.t('foobar')

    # Warm models, load schema
    (ActiveRecord::Base.connection.tables - %w[schema_migrations]).each do |table|
      table.classify.constantize.first rescue nil
    end

    # Warm the router
    Rails.application.routes.recognize_path('abc') rescue nil

    # Run GC
    GC.start
  end

  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "/run/lock/<%= @app_shortname %>/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end
